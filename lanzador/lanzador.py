#!/usr/bin/env python3
"""
Lanzador principal del sistema que demuestra SRP PURO aplicado.

Responsabilidad √∫nica del Lanzador: ORQUESTACI√ìN del flujo de procesamiento.
- NO toma decisiones de configuraci√≥n (delegadas al Configurador)
- NO interact√∫a con usuario para configuraci√≥n
- SOLO coordina la ejecuci√≥n entre componentes configurados

Versi√≥n: 5.0 - SRP Puro
"""
import platform
import os
from configurador import Configurador


class Lanzador:
    """
    Lanzador que aplica SRP PURO - Responsabilidad √∫nica: ORQUESTACI√ìN

    El Lanzador coordina la ejecuci√≥n del flujo de procesamiento sin:
    - Tomar decisiones de configuraci√≥n
    - Interactuar con el usuario para configuraci√≥n
    - Conocer implementaciones espec√≠ficas

    Solo orquesta: Adquisici√≥n ‚Üí Procesamiento ‚Üí Visualizaci√≥n
    """

    @staticmethod
    def limpiar_pantalla():
        """
        Limpia la pantalla de manera compatible con diferentes sistemas operativos
        """
        if platform.system() == "Windows":
            os.system("cls")
        else:
            os.system("clear")

    @staticmethod
    def tecla():
        """
        Funci√≥n que solicita una tecla para continuar
        """
        while True:
            respuesta = input('Presione C para continuar> ').upper().strip()
            if respuesta == "C":
                break
            print("Por favor, presione 'C' para continuar")



    @staticmethod
    def ejecutar():
        """
        Orquesta el flujo de procesamiento de se√±ales aplicando SRP puro.

        Responsabilidad √∫nica del Lanzador: Coordinar la interacci√≥n entre componentes
        sin tomar decisiones de configuraci√≥n (delegadas al Configurador).
        """
        try:
            # ‚úÖ SRP PURO: Solo obtener componentes configurados (sin decidir cu√°les)
            adquisidor = Configurador.crear_adquisidor()
            procesador = Configurador.crear_procesador()  # Decisi√≥n "de f√°brica"
            visualizador = Configurador.crear_visualizador()

            Lanzador.limpiar_pantalla()
            print("=== DEMOSTRACI√ìN SRP PURO - PROCESAMIENTO DE SE√ëALES v5.0 ===")
            print("Lanzador con responsabilidad √∫nica: ORQUESTACI√ìN")
            print("Configurador con responsabilidad √∫nica: CREACI√ìN")
            print()

            # ‚úÖ ORQUESTACI√ìN: Paso 1 - Adquisici√≥n
            print("üì° PASO 1 - ADQUISICI√ìN DE LA SE√ëAL")
            print("-" * 40)
            adquisidor.leer_senial()
            senial_original = adquisidor.obtener_senial_adquirida()
            print(f"‚úÖ Se√±al adquirida con {senial_original.obtener_tamanio()} muestras")
            Lanzador.tecla()

            # ‚úÖ ORQUESTACI√ìN: Paso 2 - Procesamiento
            print(f"\n‚öôÔ∏è  PASO 2 - PROCESAMIENTO")
            print("-" * 40)
            print(f"‚úÖ Procesador configurado: {type(procesador).__name__}")
            print("‚úÖ Configuraci√≥n decidida por el Configurador (SRP)")

            # ‚úÖ USO DIRECTO: Sin wrapper innecesario
            procesador.procesar(senial_original)
            senial_procesada = procesador.obtener_senial_procesada()

            print("‚úÖ Procesamiento completado")
            Lanzador.tecla()

            # ‚úÖ ORQUESTACI√ìN: Paso 3 - Visualizaci√≥n
            print("\nüìä PASO 3 - VISUALIZACI√ìN DE RESULTADOS")
            print("-" * 40)
            print("Comparaci√≥n entre se√±al original y procesada:")
            print()

            print("üîπ SE√ëAL ORIGINAL:")
            visualizador.mostrar_datos(senial_original)
            print()

            print("üî∏ SE√ëAL PROCESADA:")
            visualizador.mostrar_datos(senial_procesada)

            # ‚úÖ RESULTADO: SRP aplicado correctamente
            print(f"\nüéâ DEMOSTRACI√ìN SRP PURO COMPLETADA")
            print("="*60)
            print("‚úÖ RESPONSABILIDADES PERFECTAMENTE SEPARADAS:")
            print("   ‚Ä¢ Lanzador: SOLO orquestar el flujo de procesamiento")
            print("   ‚Ä¢ Configurador: SOLO crear y configurar objetos")
            print("   ‚Ä¢ Adquisidor: SOLO capturar datos de entrada")
            print("   ‚Ä¢ Procesador: SOLO transformar se√±ales")
            print("   ‚Ä¢ Visualizador: SOLO mostrar resultados")
            print()
            print("üèóÔ∏è  PRINCIPIOS SOLID DEMOSTRADOS:")
            print("   ‚úÖ SRP: Una responsabilidad por clase/paquete")
            print("   ‚úÖ OCP: Procesadores extensibles sin modificar lanzador")
            print("   ‚úÖ LSP: Cualquier procesador funciona polim√≥rficamente")
            print("   ‚úÖ Preparado para DIP: Configurador listo para inyecci√≥n")
            print()
            print("üìö LECCI√ìN APRENDIDA:")
            print("   üéØ SEPARACI√ìN TOTAL de responsabilidades")
            print("   üéØ CONFIGURACI√ìN CENTRALIZADA sin input del usuario")
            print("   üéØ ORQUESTACI√ìN PURA sin l√≥gica de negocio")
            print("="*60)

        except KeyboardInterrupt:
            print("\n\n‚ö†Ô∏è  Proceso interrumpido por el usuario")
        except Exception as e:
            print(f"\n‚ùå Error durante la ejecuci√≥n: {e}")
            print("   Verifique que todos los componentes est√©n correctamente instalados")


def ejecutar():
    """
    Funci√≥n de entrada para el comando de consola
    """
    Lanzador.ejecutar()


if __name__ == "__main__":
    ejecutar()

#!/usr/bin/env python3
"""
Lanzador principal del sistema que demuestra la aplicaci√≥n de principios SOLID,
donde las responsabilidades se dividen entre diferentes clases y paquetes.
"""
import platform
import os
from adquisicion_senial import Adquisidor
from procesamiento_senial import Procesador, ProcesadorUmbral  # ‚ö†Ô∏è DEPENDENCIAS M√öLTIPLES
from presentacion_senial import Visualizador


class Lanzador:
    """
    Programa Lanzador que demuestra la aplicaci√≥n de principios SOLID
    """

    @staticmethod
    def limpiar_pantalla():
        """
        Limpia la pantalla de manera compatible con diferentes sistemas operativos
        """
        if platform.system() == "Windows":
            os.system("cls")
        else:
            os.system("clear")

    @staticmethod
    def tecla():
        """
        Funci√≥n que solicita una tecla para continuar
        """
        while True:
            respuesta = input('Presione C para continuar> ').upper().strip()
            if respuesta == "C":
                break
            print("Por favor, presione 'C' para continuar")

    @staticmethod
    def seleccionar_tipo_procesamiento():
        """
        Permite al usuario seleccionar el tipo de procesamiento y sus par√°metros.

        Returns:
            tuple: (tipo_procesamiento, parametro, descripcion)
        """
        print("\n" + "="*60)
        print("SELECCI√ìN DE TIPO DE PROCESAMIENTO")
        print("="*60)
        print("Opciones disponibles:")
        print("1. Amplificaci√≥n (multiplica cada valor por un factor)")
        print("2. Filtro por umbral (mantiene valores menores al umbral)")
        print()

        while True:
            try:
                opcion = int(input("Seleccione una opci√≥n (1 o 2): "))
                if opcion in [1, 2]:
                    break
                print("‚ùå Opci√≥n inv√°lida. Por favor ingrese 1 o 2.")
            except ValueError:
                print("‚ùå Por favor ingrese un n√∫mero v√°lido.")

        if opcion == 1:
            # Procesamiento por amplificaci√≥n
            print("\n--- Configuraci√≥n de Amplificaci√≥n ---")
            while True:
                try:
                    factor = float(input("Ingrese el factor de amplificaci√≥n (ej: 2.0): "))
                    if factor > 0:
                        break
                    print("‚ùå El factor debe ser mayor que 0.")
                except ValueError:
                    print("‚ùå Por favor ingrese un n√∫mero v√°lido.")

            tipo_procesamiento = "amplificar"
            parametro = factor
            descripcion = f"Amplificaci√≥n con factor {factor}x"

        else:
            # Procesamiento por umbral
            print("\n--- Configuraci√≥n de Filtro por Umbral ---")
            print("Nota: Se mantendr√°n valores menores al umbral, los dem√°s se pondr√°n en 0")
            while True:
                try:
                    umbral = float(input("Ingrese el valor del umbral: "))
                    break
                except ValueError:
                    print("‚ùå Por favor ingrese un n√∫mero v√°lido.")

            tipo_procesamiento = "umbral"
            parametro = umbral
            descripcion = f"Filtro por umbral = {umbral}"

        print(f"‚úÖ Configuraci√≥n seleccionada: {descripcion}")
        return tipo_procesamiento, parametro, descripcion

    @staticmethod
    def ejecutar():
        """
        Ejecuta el procesamiento de se√±al usando las clases que implementan principios SOLID.
        Se instancian las clases que participan del procesamiento.
        Permite seleccionar el tipo de procesamiento de manera interactiva.
        """
        try:
            # Instanciar componentes base
            adquisidor = Adquisidor(5)
            visualizador = Visualizador()

            Lanzador.limpiar_pantalla()
            print("=== DEMOSTRACI√ìN OCP 'T√âCNICO' - PROCESAMIENTO DE SE√ëALES v3.0 ===")
            print("Sistema que cumple OCP localmente pero crea problemas de dependencias")
            print()

            # Paso 1 - Adquisici√≥n de la se√±al
            print("üì° PASO 1 - ADQUISICI√ìN DE LA SE√ëAL")
            print("-" * 40)
            adquisidor.leer_senial()
            senial_adquirida = adquisidor.obtener_senial_adquirida()

            print(f"\n‚úÖ Se√±al adquirida con {senial_adquirida.obtener_tamanio()} muestras")
            Lanzador.tecla()

            # Selecci√≥n de tipo de procesamiento
            tipo_procesamiento, parametro, descripcion = Lanzador.seleccionar_tipo_procesamiento()
            Lanzador.tecla()

            # ‚ö†Ô∏è PROBLEMA DE DEPENDENCIAS: Lanzador debe conocer clases concretas
            print(f"\n‚öôÔ∏è  PASO 2 - PROCESAMIENTO: {descripcion.upper()}")
            print("-" * 40)
            print("‚ö†Ô∏è  NOTA: Observe c√≥mo el Lanzador debe elegir entre clases concretas...")

            # ‚ùå L√ìGICA CONDICIONAL EN LANZADOR (problema de dependencias)
            if tipo_procesamiento == "amplificar":
                print("Usando clase Procesador original (sin modificar - cumple OCP)")
                procesador = Procesador()  # Clase original, constructor sin par√°metros
                procesador.procesar_senial(senial_adquirida)  # Interfaz original

            elif tipo_procesamiento == "umbral":
                print(f"Usando nueva clase ProcesadorUmbral (extensi√≥n - cumple OCP)")
                procesador = ProcesadorUmbral(parametro)  # ‚ö†Ô∏è Interfaz inconsistente
                procesador.procesar_senial(senial_adquirida)  # Misma interfaz externa

            else:
                raise ValueError(f"Tipo '{tipo_procesamiento}' no soportado")

            senial_procesada = procesador.obtener_senial_procesada()
            print("‚úÖ Procesamiento completado")
            print("‚ö†Ô∏è  PROBLEMA: Lanzador acoplado a clases concretas")
            Lanzador.tecla()

            # Paso 3 - Visualizaci√≥n de la se√±al procesada
            print("\nüìä PASO 3 - VISUALIZACI√ìN DE RESULTADOS")
            print("-" * 40)
            print("Comparaci√≥n entre se√±al original y procesada:")
            print()

            # Mostrar se√±al original
            print("üîπ SE√ëAL ORIGINAL:")
            visualizador.mostrar_datos(senial_adquirida)
            print()

            # Mostrar se√±al procesada
            print(f"üî∏ SE√ëAL PROCESADA ({descripcion}):")
            visualizador.mostrar_datos(senial_procesada)

            print(f"\nüéâ DEMOSTRACI√ìN COMPLETADA")
            print("="*70)
            print("‚úÖ OCP 'T√âCNICAMENTE' CUMPLIDO:")
            print("   ‚Ä¢ Procesador original NO modificado")
            print("   ‚Ä¢ Nueva funcionalidad agregada via ProcesadorUmbral")
            print("   ‚Ä¢ C√≥digo existente preservado")
            print()
            print("‚ö†Ô∏è  PERO PROBLEMAS CREADOS:")
            print("   ‚ùå Lanzador acoplado a clases concretas")
            print("   ‚ùå Interfaces inconsistentes (constructores diferentes)")
            print("   ‚ùå L√≥gica condicional movida a capa superior")
            print("   ‚ùå Violaci√≥n de DIP (dependencias hacia concreciones)")
            print("   ‚ùå Escalabilidad comprometida")
            print()
            print("üìö LECCI√ìN: Cumplir OCP localmente puede crear problemas globales")
            print("üéØ PR√ìXIMO PASO: Aplicar OCP correctamente con abstracciones")
            print("="*70)

        except KeyboardInterrupt:
            print("\n\n‚ö†Ô∏è  Proceso interrumpido por el usuario")
        except Exception as e:
            print(f"\n‚ùå Error durante la ejecuci√≥n: {e}")
            print("   Verifique que todos los componentes est√©n correctamente instalados")


def ejecutar():
    """
    Funci√≥n de entrada para el comando de consola
    """
    Lanzador.ejecutar()


if __name__ == "__main__":
    ejecutar()
"""
Configurador - Factory Centralizado para la Aplicaci√≥n

Este m√≥dulo implementa el patr√≥n Factory Centralizado que aplica SRP
para separar completamente las responsabilidades de CREACI√ìN y ORQUESTACI√ìN.

üìö DOCUMENTACI√ìN T√âCNICA:
- SRP aplicado: docs/IMPLEMETACION DE SRP EN PAQUETES.md
- Preparaci√≥n DIP: Configuraci√≥n program√°tica como base para inyecci√≥n futura

üéØ PRINCIPIOS SOLID APLICADOS:
- SRP: Una responsabilidad √∫nica - crear y configurar objetos
- Preparaci√≥n OCP: Extensible para nuevos tipos sin modificar cliente
- Base para DIP: Centralizaci√≥n que facilita inversi√≥n de dependencias

üèóÔ∏è PATR√ìN IMPLEMENTADO:
Factory Centralizado con decisiones "de f√°brica" - sin input del usuario,
permitiendo que el Lanzador se enfoque SOLO en orquestaci√≥n.

Versi√≥n: 2.1.0 - SRP Puro con Factory Centralizado + Inyecci√≥n de Se√±ales
Autor: Victor Valotto
"""
from adquisicion_senial import AdquisidorConsola, AdquisidorArchivo
from procesamiento_senial import ProcesadorAmplificador, ProcesadorConUmbral
from presentacion_senial import Visualizador
from dominio_senial import Senial, SenialPila, SenialCola


class Configurador:
    """
    Factory Centralizado que aplica SRP PURO para la creaci√≥n de objetos.

    üìñ RESPONSABILIDAD √öNICA:
    Crear y configurar todas las instancias de clases que participan en la
    soluci√≥n de procesamiento de se√±ales, separando completamente esta
    responsabilidad del c√≥digo que USA los objetos.

    üìö REFERENCIA TE√ìRICA:
    - docs/IMPLEMETACION DE SRP EN PAQUETES.md: Evoluci√≥n de SRP a nivel paquetes
    - docs/IMPLEMENTACION DE OCP CON ABSTRACCIONES.md: Uso de abstracciones

    üéØ DECISIONES "DE F√ÅBRICA":
    Configuraci√≥n program√°tica definida en c√≥digo sin input del usuario,
    permitiendo que el sistema funcione con configuraciones predeterminadas
    mientras se prepara para DIP (Dependency Inversion Principle).

    üîÑ INYECCI√ìN DE SE√ëALES:
    Los componentes pueden reciben tipos de se√±al independientes:
    - Adquisidores: crear_senial_adquisidor()
    - Procesadores: crear_senial_procesador()
    Permitiendo experimentos LSP sofisticados con tipos mixtos.

    üîÑ EVOLUCI√ìN PLANIFICADA:
    V2.0: Configuraci√≥n program√°tica con inyecci√≥n de se√±ales (ACTUAL)
    V3.0: Configuraci√≥n externa (archivos JSON/YAML) - DIP aplicado
    V4.0: Inyecci√≥n de dependencias completa - IoC Container
    """

    @staticmethod
    def crear_adquisidor_consola():
        """
        Crea un adquisidor desde consola con configuraci√≥n espec√≠fica.

        üìñ CONFIGURACI√ìN INTEGRADA:
        - N√∫mero de muestras: 5
        - Tipo de se√±al: Configurado desde factory central

        :return: Instancia configurada de AdquisidorConsola con se√±al apropiada
        """
        numero_muestras = 5
        adquisidor = AdquisidorConsola(numero_muestras)
        # üîÑ INYECCI√ìN DE DEPENDENCIA: Tipo de se√±al espec√≠fico para adquisidor
        adquisidor._senial = Configurador.crear_senial_adquisidor()
        return adquisidor

    @staticmethod
    def crear_adquisidor_archivo(ruta_archivo='senial.txt'):
        """
        Crea un adquisidor desde archivo con configuraci√≥n espec√≠fica.

        üìñ CONFIGURACI√ìN INTEGRADA:
        - Archivo: 'senial.txt' por defecto
        - Tipo de se√±al: Configurado desde factory central

        :param ruta_archivo: Ruta del archivo a leer (por defecto 'senial.txt')
        :return: Instancia configurada de AdquisidorArchivo con se√±al apropiada
        """
        adquisidor = AdquisidorArchivo(ruta_archivo)
        # üîÑ INYECCI√ìN DE DEPENDENCIA: Tipo de se√±al espec√≠fico para adquisidor
        adquisidor._senial = Configurador.crear_senial_adquisidor()
        return adquisidor

    @staticmethod
    def crear_adquisidor():
        """
        üè≠ FACTORY METHOD PRINCIPAL - Adquisidor configurado de f√°brica.

        üìñ SRP APLICADO:
        El Configurador DECIDE qu√© adquisidor usar sin consultar al usuario,
        separando la responsabilidad de configuraci√≥n de la orquestaci√≥n.

        üìö REFERENCIA OCP:
        docs/IMPLEMENTACION DE OCP CON ABSTRACCIONES.md - Demuestra c√≥mo
        cambiar implementaciones sin modificar c√≥digo cliente (Lanzador).

        üéØ DECISI√ìN "DE F√ÅBRICA":
        AdquisidorArchivo('senial.txt') - Lectura desde archivo sin interacci√≥n.
        Esta decisi√≥n puede cambiar aqu√≠ sin afectar el Lanzador (OCP).

        üîÑ INYECCI√ìN AUTOM√ÅTICA:
        El adquisidor recibe autom√°ticamente el tipo de se√±al configurado
        en crear_senial_adquisidor(), permitiendo experimentos LSP controlados.

        :return: BaseAdquisidor - Abstracci√≥n que garantiza polimorfismo
        :rtype: BaseAdquisidor
        """
        return Configurador.crear_adquisidor_archivo()

    @staticmethod
    def crear_procesador_amplificador():
        """
        Crea un procesador amplificador con configuraci√≥n espec√≠fica.

        üìñ CONFIGURACI√ìN INTEGRADA:
        - Factor de amplificaci√≥n: 4.0
        - Tipo de se√±al: Configurado desde factory central

        :return: Instancia configurada de ProcesadorAmplificador con se√±al apropiada
        """
        factor_amplificacion = 4.0
        procesador = ProcesadorAmplificador(factor_amplificacion)
        # üîÑ INYECCI√ìN DE DEPENDENCIA: Tipo de se√±al espec√≠fico para procesador
        procesador._senial = Configurador.crear_senial_procesador()
        return procesador

    @staticmethod
    def crear_procesador_umbral():
        """
        Crea un procesador con umbral con configuraci√≥n espec√≠fica.

        üìñ CONFIGURACI√ìN INTEGRADA:
        - Umbral: 8.0
        - Tipo de se√±al: Configurado desde factory central

        :return: Instancia configurada de ProcesadorConUmbral con se√±al apropiada
        """
        umbral = 8.0
        procesador = ProcesadorConUmbral(umbral)
        # üîÑ INYECCI√ìN DE DEPENDENCIA: Tipo de se√±al espec√≠fico para procesador
        procesador._senial = Configurador.crear_senial_procesador()
        return procesador

    @staticmethod
    def crear_procesador():
        """
        üè≠ FACTORY METHOD PRINCIPAL - Procesador configurado de f√°brica.

        üìñ SRP + OCP DEMOSTRADO:
        El Configurador decide qu√© procesador usar (SRP) y puede cambiar
        la implementaci√≥n sin afectar el Lanzador (OCP).

        üìö REFERENCIA ARQUITECT√ìNICA:
        docs/IMPLEMENTACION DE OCP CON ABSTRACCIONES.md - Secci√≥n "Factory Pattern"
        Explica c√≥mo este metodo centraliza decisiones manteniendo extensibilidad.

        üéØ DECISI√ìN "DE F√ÅBRICA":
        ProcesadorAmplificador(4.0) - Amplificaci√≥n por factor 4 sin input usuario.
        Cambiar a ProcesadorConUmbral aqu√≠ NO requiere modificar Lanzador.

        üîÑ INYECCI√ìN AUTOM√ÅTICA:
        El procesador recibe autom√°ticamente el tipo de se√±al configurado
        en crear_senial_procesador(), permitiendo experimentos LSP independientes.

        üîÑ EJEMPLO EXTENSI√ìN SIN MODIFICACI√ìN:
        # return Configurador.crear_procesador_umbral()  # ‚Üê Cambio OCP
        # return Configurador.crear_procesador_suavizado()  # ‚Üê Futuro

        :return: BaseProcesador - Abstracci√≥n que garantiza polimorfismo
        :rtype: BaseProcesador
        """
        return Configurador.crear_procesador_amplificador()

    @staticmethod
    def crear_visualizador():
        """
        Crea el visualizador de se√±ales configurado para la aplicaci√≥n.

        :return: Instancia configurada de Visualizador
        """
        return Visualizador()

    @staticmethod
    def crear_senial_lista():
        """
        üè≠ FACTORY METHOD - Crea se√±al con comportamiento de lista.

        üìñ CONFIGURACI√ìN "DE F√ÅBRICA":
        Se√±al b√°sica con acceso secuencial por √≠ndice y tama√±o por defecto.
        Comportamiento: Lista din√°mica est√°ndar.

        :return: Instancia configurada de Senial (comportamiento lista)
        :rtype: Senial
        """
        return Senial()

    @staticmethod
    def crear_senial_pila():
        """
        üè≠ FACTORY METHOD - Crea se√±al con comportamiento de pila (LIFO).

        üìñ CONFIGURACI√ìN "DE F√ÅBRICA":
        Se√±al que act√∫a como pila - Last In, First Out.
        Comportamiento: Extracci√≥n desde el final con sacar_valor().

        ‚ö†Ô∏è NOTA LSP: Esta implementaci√≥n puede no ser intercambiable
        con Senial b√°sica debido a sem√°nticas diferentes.

        :return: Instancia configurada de SenialPila (comportamiento LIFO)
        :rtype: SenialPila
        """
        return SenialPila()

    @staticmethod
    def crear_senial_cola():
        """
        üè≠ FACTORY METHOD - Crea se√±al con comportamiento de cola circular (FIFO).

        üìñ CONFIGURACI√ìN "DE F√ÅBRICA":
        Se√±al que act√∫a como cola circular - First In, First Out.
        Comportamiento: Extracci√≥n desde el inicio con punteros circulares.
        Tama√±o: 10 elementos (configuraci√≥n por defecto).

        ‚ö†Ô∏è NOTA LSP: Esta implementaci√≥n puede no ser intercambiable
        con Senial b√°sica debido a:
        - Constructor requiere tama√±o obligatorio
        - Estructura interna de array circular
        - Sem√°nticas FIFO vs acceso por √≠ndice

        :return: Instancia configurada de SenialCola (comportamiento FIFO)
        :rtype: SenialCola
        """
        tamanio_cola = 10  # Configuraci√≥n "de f√°brica"
        return SenialCola(tamanio_cola)

    @staticmethod
    def crear_senial_adquisidor():
        """
        üè≠ FACTORY METHOD ESPEC√çFICO - Se√±al para componentes de adquisici√≥n.

        üìñ PROP√ìSITO:
        Permite configurar tipos de se√±al espec√≠ficos para adquisidores,
        independientemente del tipo usado en procesadores.

        üéØ EXPERIMENTOS LSP AVANZADOS:
        Cambiar este m√©todo permite probar violaciones LSP espec√≠ficas
        en la fase de adquisici√≥n sin afectar el procesamiento.

        Ejemplos experimentales:
        - return Configurador.crear_senial_pila()   # ‚Üê Adquisici√≥n con LIFO
        - return Configurador.crear_senial_cola()   # ‚Üê Adquisici√≥n con FIFO

        :return: Se√±al configurada espec√≠ficamente para adquisidores
        :rtype: Senial
        """
        return Configurador.crear_senial_cola()

    @staticmethod
    def crear_senial_procesador():
        """
        üè≠ FACTORY METHOD ESPEC√çFICO - Se√±al para componentes de procesamiento.

        üìñ PROP√ìSITO:
        Permite configurar tipos de se√±al espec√≠ficos para procesadores,
        independientemente del tipo usado en adquisidores.

        üéØ EXPERIMENTOS LSP AVANZADOS:
        Cambiar este m√©todo permite probar violaciones LSP espec√≠ficas
        en la fase de procesamiento, creando inconsistencias interesantes.

        üß™ ESCENARIOS EXPERIMENTALES:
        - Adquisidor: Lista, Procesador: Pila  ‚Üê Inconsistencia mixta
        - Adquisidor: Cola, Procesador: Lista  ‚Üê Transferencia problem√°tica
        - Adquisidor: Pila, Procesador: Cola   ‚Üê Sem√°nticas opuestas

        :return: Se√±al configurada espec√≠ficamente para procesadores
        :rtype: Senial
        """
        return Configurador.crear_senial_pila()
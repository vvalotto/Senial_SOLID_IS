"""
Configurador - Factory Centralizado para la Aplicaci√≥n

Este m√≥dulo implementa el patr√≥n Factory Centralizado que aplica SRP
para separar completamente las responsabilidades de CREACI√ìN y ORQUESTACI√ìN.

üìö DOCUMENTACI√ìN T√âCNICA:
- SRP aplicado: docs/IMPLEMETACION DE SRP EN PAQUETES.md
- Preparaci√≥n DIP: Configuraci√≥n program√°tica como base para inyecci√≥n futura

üéØ PRINCIPIOS SOLID APLICADOS:
- SRP: Una responsabilidad √∫nica - crear y configurar objetos
- Preparaci√≥n OCP: Extensible para nuevos tipos sin modificar cliente
- Base para DIP: Centralizaci√≥n que facilita inversi√≥n de dependencias

üèóÔ∏è PATR√ìN IMPLEMENTADO:
Factory Centralizado con decisiones "de f√°brica" - sin input del usuario,
permitiendo que el Lanzador se enfoque SOLO en orquestaci√≥n.

Versi√≥n: 2.0.0 - SRP Puro con Factory Centralizado
Autor: Victor Valotto
"""
from adquisicion_senial import AdquisidorConsola, AdquisidorArchivo
from procesamiento_senial import ProcesadorAmplificador, ProcesadorConUmbral
from presentacion_senial import Visualizador


class Configurador:
    """
    Factory Centralizado que aplica SRP PURO para la creaci√≥n de objetos.

    üìñ RESPONSABILIDAD √öNICA:
    Crear y configurar todas las instancias de clases que participan en la
    soluci√≥n de procesamiento de se√±ales, separando completamente esta
    responsabilidad del c√≥digo que USA los objetos.

    üìö REFERENCIA TE√ìRICA:
    - docs/IMPLEMETACION DE SRP EN PAQUETES.md: Evoluci√≥n de SRP a nivel paquetes
    - docs/IMPLEMENTACION DE OCP CON ABSTRACCIONES.md: Uso de abstracciones

    üéØ DECISIONES "DE F√ÅBRICA":
    Configuraci√≥n program√°tica definida en c√≥digo sin input del usuario,
    permitiendo que el sistema funcione con configuraciones predeterminadas
    mientras se prepara para DIP (Dependency Inversion Principle).

    üîÑ EVOLUCI√ìN PLANIFICADA:
    V2.0: Configuraci√≥n program√°tica (ACTUAL)
    V3.0: Configuraci√≥n externa (archivos JSON/YAML) - DIP aplicado
    V4.0: Inyecci√≥n de dependencias completa - IoC Container
    """

    @staticmethod
    def crear_adquisidor():
        """
        üè≠ FACTORY METHOD PRINCIPAL - Adquisidor configurado de f√°brica.

        üìñ SRP APLICADO:
        El Configurador DECIDE qu√© adquisidor usar sin consultar al usuario,
        separando la responsabilidad de configuraci√≥n de la orquestaci√≥n.

        üìö REFERENCIA OCP:
        docs/IMPLEMENTACION DE OCP CON ABSTRACCIONES.md - Demuestra c√≥mo
        cambiar implementaciones sin modificar c√≥digo cliente (Lanzador).

        üéØ DECISI√ìN "DE F√ÅBRICA":
        AdquisidorArchivo('senial.txt') - Lectura desde archivo sin interacci√≥n.
        Esta decisi√≥n puede cambiar aqu√≠ sin afectar el Lanzador (OCP).

        :return: BaseAdquisidor - Abstracci√≥n que garantiza polimorfismo
        :rtype: BaseAdquisidor
        """
        return Configurador.crear_adquisidor_archivo()

    @staticmethod
    def crear_adquisidor_consola():
        """
        Crea un adquisidor desde consola con configuraci√≥n espec√≠fica.

        Configuraci√≥n actual: 5 muestras por se√±al
        :return: Instancia configurada de AdquisidorConsola
        """
        numero_muestras = 5
        return AdquisidorConsola(numero_muestras)

    @staticmethod
    def crear_adquisidor_archivo(ruta_archivo='senial.txt'):
        """
        Crea un adquisidor desde archivo con configuraci√≥n espec√≠fica.

        :param ruta_archivo: Ruta del archivo a leer (por defecto 'senial.txt')
        :return: Instancia configurada de AdquisidorArchivo
        """
        return AdquisidorArchivo(ruta_archivo)

    @staticmethod
    def crear_procesador_amplificador():
        """
        Crea un procesador amplificador con configuraci√≥n espec√≠fica.

        Configuraci√≥n actual: Factor de amplificaci√≥n 4.0
        :return: Instancia configurada de ProcesadorAmplificador
        """
        factor_amplificacion = 4.0
        return ProcesadorAmplificador(factor_amplificacion)

    @staticmethod
    def crear_procesador_umbral():
        """m
        Crea un procesador con umbral con configuraci√≥n espec√≠fica.

        Configuraci√≥n actual: Umbral de 8.0
        :return: Instancia configurada de ProcesadorConUmbral
        """
        umbral = 8.0
        return ProcesadorConUmbral(umbral)

    @staticmethod
    def crear_procesador():
        """
        üè≠ FACTORY METHOD PRINCIPAL - Procesador configurado de f√°brica.

        üìñ SRP + OCP DEMOSTRADO:
        El Configurador decide qu√© procesador usar (SRP) y puede cambiar
        la implementaci√≥n sin afectar el Lanzador (OCP).

        üìö REFERENCIA ARQUITECT√ìNICA:
        docs/IMPLEMENTACION DE OCP CON ABSTRACCIONES.md - Secci√≥n "Factory Pattern"
        Explica c√≥mo este m√©todo centraliza decisiones manteniendo extensibilidad.

        üéØ DECISI√ìN "DE F√ÅBRICA":
        ProcesadorAmplificador(4.0) - Amplificaci√≥n por factor 4 sin input usuario.
        Cambiar a ProcesadorConUmbral aqu√≠ NO requiere modificar Lanzador.

        üîÑ EJEMPLO EXTENSI√ìN SIN MODIFICACI√ìN:
        # return Configurador.crear_procesador_umbral()  # ‚Üê Cambio OCP
        # return Configurador.crear_procesador_suavizado()  # ‚Üê Futuro

        :return: BaseProcesador - Abstracci√≥n que garantiza polimorfismo
        :rtype: BaseProcesador
        """
        return Configurador.crear_procesador_amplificador()

    @staticmethod
    def crear_visualizador():
        """
        Crea el visualizador de se√±ales configurado para la aplicaci√≥n.

        :return: Instancia configurada de Visualizador
        """
        return Visualizador()

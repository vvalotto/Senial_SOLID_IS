"""
Cargador de Configuraci√≥n Externa - DIP Aplicado

Este m√≥dulo implementa la carga de configuraci√≥n desde archivo JSON externo,
completando la aplicaci√≥n del principio DIP (Dependency Inversion Principle).

üéØ PRINCIPIOS SOLID APLICADOS:
- DIP: Configuraci√≥n externa determina las dependencias
- SRP: Responsabilidad √∫nica - leer y validar configuraci√≥n
- OCP: Extensible para nuevos formatos (YAML, TOML)

üìö MIGRACI√ìN XML ‚Üí JSON:
Este m√≥dulo reemplaza la lectura XML (minidom.parse) de versiones anteriores
con una implementaci√≥n JSON moderna y m√°s mantenible.

Versi√≥n: 1.0.0 - DIP con configuraci√≥n externa JSON
Autor: Victor Valotto
"""
import json
from pathlib import Path
from typing import Dict, Any


class CargadorConfig:
    """
    ‚úÖ Cargador de configuraci√≥n externa desde JSON.

    üìñ RESPONSABILIDAD √öNICA:
    Leer, validar y proporcionar acceso a la configuraci√≥n del sistema
    desde archivo JSON externo.

    üéØ DIP APLICADO:
    El sistema no decide sus dependencias - la configuraci√≥n externa lo hace.
    """

    def __init__(self, ruta_config: str = None):
        """
        Inicializa el cargador con la ruta al archivo de configuraci√≥n.

        Si no se proporciona ruta, busca config.json en el mismo directorio
        que este m√≥dulo, independientemente de desde d√≥nde se ejecute.

        :param ruta_config: Ruta al archivo JSON de configuraci√≥n (opcional)
        """
        if ruta_config is None:
            # Determinar ruta relativa al m√≥dulo configurador, no al CWD
            modulo_dir = Path(__file__).parent
            self.ruta_config = modulo_dir / 'config.json'
        else:
            self.ruta_config = Path(ruta_config)
        self._config = None

    def cargar(self) -> Dict[str, Any]:
        """
        Carga la configuraci√≥n desde el archivo JSON.

        :return: Diccionario con toda la configuraci√≥n
        :raises FileNotFoundError: Si el archivo no existe
        :raises json.JSONDecodeError: Si el JSON es inv√°lido
        """
        if not self.ruta_config.exists():
            raise FileNotFoundError(
                f"Archivo de configuraci√≥n no encontrado: {self.ruta_config}"
            )

        with open(self.ruta_config, 'r', encoding='utf-8') as f:
            self._config = json.load(f)

        return self._config

    def obtener_dir_datos(self) -> str:
        """
        Obtiene el directorio de recursos de datos.
        JSON: "dir_recurso_datos": "./tmp/datos"
        :return: Path del directorio de datos
        """
        if self._config is None:
            self.cargar()
        return self._config.get('dir_recurso_datos', './tmp/datos')

    def obtener_config_senial_adquisidor(self) -> Dict[str, Any]:
        """
        Retorna configuraci√≥n de se√±al para adquisidor.
        JSON: "senial_adquisidor": {"tipo": "cola", "tamanio": 20}
        :return: {'tipo': str, 'tamanio': int}
        """
        if self._config is None:
            self.cargar()
        return self._config.get('senial_adquisidor', {'tipo': 'lista', 'tamanio': 10})

    def obtener_config_senial_procesador(self) -> Dict[str, Any]:
        """
        Retorna configuraci√≥n de se√±al para procesador.
        JSON: "senial_procesador": {"tipo": "pila", "tamanio": 20}
        :return: {'tipo': str, 'tamanio': int}
        """
        if self._config is None:
            self.cargar()
        return self._config.get('senial_procesador', {'tipo': 'lista', 'tamanio': 10})

    def obtener_config_adquisidor(self) -> Dict[str, Any]:
        """
        Retorna configuraci√≥n de adquisidor.
        JSON: "adquisidor": {"tipo": "archivo", "ruta_archivo": "./adquisidor/datos.txt"}
        :return: {'tipo': str, 'ruta_archivo': str, ...}
        """
        if self._config is None:
            self.cargar()
        return self._config.get('adquisidor', {'tipo': 'consola', 'num_muestras': 5})

    def obtener_config_procesador(self) -> Dict[str, Any]:
        """
        Retorna configuraci√≥n de procesador.
        JSON: "procesador": {"tipo": "umbral", "umbral": 100}
        :return: {'tipo': str, 'factor': float, 'umbral': float, ...}
        """
        if self._config is None:
            self.cargar()
        return self._config.get('procesador', {'tipo': 'amplificador', 'factor': 4.0})

    def obtener_config_contexto_adquisicion(self) -> Dict[str, Any]:
        """
        Retorna configuraci√≥n de contexto de adquisici√≥n.
        JSON: "contexto_adquisicion": {"tipo": "pickle", "recurso": "./tmp/datos/adquisicion"}
        :return: {'tipo': str, 'recurso': str}
        """
        if self._config is None:
            self.cargar()
        return self._config.get('contexto_adquisicion', {
            'tipo': 'pickle',
            'recurso': './tmp/datos/adquisicion'
        })

    def obtener_config_contexto_procesamiento(self) -> Dict[str, Any]:
        """
        Retorna configuraci√≥n de contexto de procesamiento.
        JSON: "contexto_procesamiento": {"tipo": "pickle", "recurso": "./tmp/datos/procesamiento"}
        :return: {'tipo': str, 'recurso': str}
        """
        if self._config is None:
            self.cargar()
        return self._config.get('contexto_procesamiento', {
            'tipo': 'pickle',
            'recurso': './tmp/datos/procesamiento'
        })

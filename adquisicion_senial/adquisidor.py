"""
Paquete adquisicion_senial - Aplicaci√≥n de OCP con Strategy Pattern

Este m√≥dulo demuestra la implementaci√≥n correcta del Open/Closed Principle
usando el patr√≥n Strategy para diferentes tipos de adquisici√≥n de se√±ales digitales.

üìö DOCUMENTACI√ìN T√âCNICA:
- OCP completo: docs/IMPLEMENTACION DE OCP CON ABSTRACCIONES.md
- Strategy Pattern: Abstracciones + polimorfismo + extensibilidad infinita

üéØ PRINCIPIOS SOLID APLICADOS:
- SRP: Cada adquisidor tiene responsabilidad √∫nica y espec√≠fica
- OCP: Extensible para nuevos tipos sin modificar c√≥digo existente
- LSP: Todas las implementaciones son intercambiables polim√≥rficamente

üèóÔ∏è PATR√ìN STRATEGY IMPLEMENTADO:
- BaseAdquisidor: Abstracci√≥n que define el contrato com√∫n
- AdquisidorConsola: Estrategia concreta para entrada interactiva
- AdquisidorArchivo: Estrategia concreta para lectura de archivos
- Futuras extensiones: Sensores, APIs, bases de datos, etc.

Versi√≥n: 2.0.0 - OCP con Strategy Pattern
Autor: Victor Valotto
"""
from abc import ABCMeta, abstractmethod
from dominio_senial.senial import Senial


class BaseAdquisidor(metaclass=ABCMeta):
    """
    üèóÔ∏è ABSTRACCI√ìN BASE - Strategy Pattern para adquisici√≥n extensible.

    üìö REFERENCIA OCP:
    docs/IMPLEMENTACION DE OCP CON ABSTRACCIONES.md - Secci√≥n "Strategy Pattern"
    Demuestra c√≥mo las abstracciones permiten extensibilidad infinita.

    üéØ CONTRATO COM√öN:
    Define la interfaz que TODAS las implementaciones deben cumplir,
    garantizando intercambiabilidad polim√≥rfica (LSP).

    ‚úÖ CUMPLE OCP:
    - Abierto para extensi√≥n: Nuevos adquisidores heredan de esta clase
    - Cerrado para modificaci√≥n: Este contrato NO cambia
    - Polimorfismo: Cliente usa BaseAdquisidor, no implementaciones espec√≠ficas

    üîÑ EXTENSIBILIDAD DEMOSTRADA:
    Agregar AdquisidorSensor, AdquisidorAPI, etc. NO requiere modificar:
    - Esta clase abstracta
    - C√≥digo que usa BaseAdquisidor
    - Tests polim√≥rficos existentes
    """
    def __init__(self, numero_muestras):
        """
        Inicializa el adquisidor base con una se√±al vac√≠a.

        :param numero_muestras: Cantidad de muestras a adquirir
        """
        self._senial = Senial()
        self._numero_muestras = numero_muestras

    def obtener_senial_adquirida(self):
        """
        Devuelve la se√±al adquirida.

        :return: Instancia de Senial con los datos adquiridos
        """
        return self._senial

    @abstractmethod
    def leer_senial(self):
        """
        üîÑ M√âTODO ABSTRACTO - Punto de extensi√≥n OCP.

        üìö REFERENCIA ARQUITECT√ìNICA:
        docs/IMPLEMENTACION DE OCP CON ABSTRACCIONES.md - "Abstract Methods"
        Explica c√≥mo los m√©todos abstractos garantizan implementaci√≥n obligatoria.

        üéØ CONTRATO OBLIGATORIO:
        Cada implementaci√≥n concreta DEBE definir c√≥mo adquiere los datos
        espec√≠ficos de su fuente (consola, archivo, sensor, API, etc.).

        ‚úÖ EXTENSIBILIDAD OCP:
        Nuevas implementaciones solo deben implementar este m√©todo:
        - AdquisidorConsola.leer_senial() ‚Üí Input desde teclado
        - AdquisidorArchivo.leer_senial() ‚Üí Lectura desde archivos
        - AdquisidorSensor.leer_senial() ‚Üí Captura desde hardware IoT
        - AdquisidorAPI.leer_senial() ‚Üí Descarga desde REST API

        üîí INVARIANTE LSP:
        Todas las implementaciones deben llenar self._senial con datos v√°lidos.
        """
        pass


class AdquisidorConsola(BaseAdquisidor):
    """
    üñ•Ô∏è ESTRATEGIA CONCRETA - Adquisici√≥n interactiva desde consola.

    üìö REFERENCIA OCP:
    docs/IMPLEMENTACION DE OCP CON ABSTRACCIONES.md - "Implementaciones Concretas"
    Demuestra extensi√≥n sin modificaci√≥n de c√≥digo existente.

    üéØ RESPONSABILIDAD ESPEC√çFICA (SRP):
    Capturar valores num√©ricos ingresados por el usuario a trav√©s de la consola,
    con validaci√≥n de entrada y manejo de errores.

    ‚úÖ CUMPLE LSP:
    - Intercambiable con cualquier BaseAdquisidor
    - Respeta el contrato: llenar self._senial con datos v√°lidos
    - Comportamiento consistente con la abstracci√≥n

    üîÑ EJEMPLO POLIMORFISMO:
    def usar_adquisidor(adq: BaseAdquisidor):  # ‚Üê Funciona con CUALQUIERA
        adq.leer_senial()  # ‚Üê Este m√©todo funciona autom√°ticamente
        return adq.obtener_senial_adquirida()
    """
    @staticmethod
    def _leer_dato_entrada():
        """
        Lee un valor num√©rico desde la consola con validaci√≥n.

        :return: Valor num√©rico ingresado por el usuario
        :raises: Contin√∫a pidiendo input hasta recibir un n√∫mero v√°lido
        """
        while True:
            try:
                return float(input('Ingresar Valor: '))
            except ValueError:
                print('‚ùå Dato mal ingresado. Por favor ingrese un n√∫mero v√°lido.')

    def leer_senial(self):
        """
        Implementa la adquisici√≥n de datos desde consola.

        Lee la cantidad especificada de muestras solicitando input del usuario.
        """
        print("üì° Lectura de la se√±al desde consola")
        for i in range(self._numero_muestras):
            print(f"Dato nro: {i}")
            self._senial.poner_valor(self._leer_dato_entrada())


class AdquisidorArchivo(BaseAdquisidor):
    """
    Adquisidor de datos desde archivo.

    Implementaci√≥n concreta que lee valores num√©ricos desde un archivo de texto,
    donde cada l√≠nea contiene un valor de la se√±al.
    """

    def __init__(self, ruta_archivo):
        """
        Inicializa el adquisidor con la ruta del archivo a leer.

        :param ruta_archivo: Ruta completa al archivo que contiene los datos
        :raises ValueError: Si la ruta no es una cadena v√°lida
        """
        super().__init__(0)  # No conocemos el tama√±o hasta leer el archivo
        if isinstance(ruta_archivo, str):
            self._ruta_archivo = ruta_archivo
        else:
            raise ValueError('La ruta del archivo debe ser una cadena de texto v√°lida')

    @property
    def ruta_archivo(self):
        """
        Getter para la ruta del archivo.

        :return: Ruta del archivo configurado
        """
        return self._ruta_archivo

    def leer_senial(self):
        """
        Implementa la adquisici√≥n de datos desde archivo.

        Lee valores num√©ricos l√≠nea por l√≠nea desde el archivo especificado.
        Cada l√≠nea debe contener un √∫nico valor num√©rico.
        """
        print(f"üìÅ Lectura de la se√±al desde archivo: {self._ruta_archivo}")
        try:
            with open(self._ruta_archivo, 'r', encoding='utf-8') as archivo:
                for numero_linea, linea in enumerate(archivo, 1):
                    try:
                        dato = float(linea.strip())
                        self._senial.poner_valor(dato)
                        print(f"  L√≠nea {numero_linea}: {dato}")
                    except ValueError:
                        print(f"‚ö†Ô∏è  Advertencia: L√≠nea {numero_linea} contiene dato inv√°lido: '{linea.strip()}'")
                        continue
        except FileNotFoundError:
            print(f"‚ùå Error: Archivo no encontrado: {self._ruta_archivo}")
        except IOError as e:
            print(f"‚ùå Error de lectura: {e}")

        print(f"‚úÖ Adquisici√≥n completada: {self._senial.obtener_tamanio()} muestras le√≠das")
"""
Factory de Se√±ales - Patr√≥n Factory + Configuraci√≥n Externa

Este m√≥dulo implementa el Factory Pattern especializado para la creaci√≥n
de se√±ales con diferentes estructuras de datos (Lista, Pila, Cola).

üéØ PRINCIPIOS SOLID APLICADOS:
- SRP: Responsabilidad √∫nica - crear se√±ales configuradas
- OCP: Extensible para nuevos tipos sin modificar clientes
- LSP: Todas las se√±ales son intercambiables (SenialBase)

üèóÔ∏è PATR√ìN IMPLEMENTADO:
Factory especializado que crea instancias de se√±ales seg√∫n configuraci√≥n externa,
permitiendo que el Configurador decida el tipo de colecci√≥n a usar.

Versi√≥n: 1.0.0 - Factory de Dominio
Autor: Victor Valotto
"""
from typing import Dict, Any

from dominio_senial.senial import (
    SenialBase,
    SenialLista,
    SenialPila,
    SenialCola
)


class FactorySenial:
    """
    ‚úÖ Factory especializado para se√±ales.

    üìñ RESPONSABILIDAD √öNICA:
    Crear instancias de se√±ales con estructura de datos espec√≠fica,
    seg√∫n la configuraci√≥n externa (JSON).

    ‚úÖ LSP GARANTIZADO:
    Todas las se√±ales creadas implementan SenialBase y son
    completamente intercambiables polim√≥rficamente.

    üîÑ EXTENSIBILIDAD:
    Agregar nuevos tipos de se√±al solo requiere modificar este factory,
    sin afectar al Configurador ni a otros componentes.
    """

    @staticmethod
    def crear(tipo_senial: str, config: Dict[str, Any]) -> SenialBase:
        """
        üè≠ FACTORY METHOD - Crea se√±al con estructura espec√≠fica.

        üìñ CONFIGURACI√ìN EXTERNA:
        El tipo y par√°metros vienen de configuraci√≥n externa (JSON),
        permitiendo cambiar la estructura de datos sin modificar c√≥digo.

        üéØ PAR√ÅMETROS:
        :param tipo_senial: Tipo de se√±al a crear
            - 'lista': Se√±al con comportamiento de lista din√°mica
            - 'pila': Se√±al con comportamiento LIFO (Last In, First Out)
            - 'cola': Se√±al con comportamiento FIFO (First In, First Out)
        :param config: Diccionario con configuraci√≥n espec√≠fica del tipo
            - Para todos: {'tamanio': int}  (opcional, default: 10)

        :return: Se√±al configurada (SenialBase)
        :rtype: SenialBase
        :raises ValueError: Si el tipo no est√° soportado

        üß™ EJEMPLO DE USO:
        ```python
        # Configuraci√≥n desde JSON
        config = {'tamanio': 20}

        # Factory crea se√±al seg√∫n tipo
        senial = FactorySenial.crear('lista', config)
        # ‚úÖ Retorna SenialLista(20)
        ```

        üìã CONFIGURACI√ìN JSON EJEMPLO:
        ```json
        {
          "senial_adquisicion": {
            "tipo": "pila",
            "tamanio": 15
          },
          "senial_procesamiento": {
            "tipo": "cola",
            "tamanio": 20
          }
        }
        ```
        """
        senial = None

        # Extraer tama√±o con valor por defecto
        tamanio = config.get('tamanio', 10)

        if tipo_senial == 'lista':
            # Crear se√±al con comportamiento de lista
            senial = SenialLista(tamanio)

        elif tipo_senial == 'pila':
            # Crear se√±al con comportamiento LIFO
            senial = SenialPila(tamanio)

        elif tipo_senial == 'cola':
            # Crear se√±al con comportamiento FIFO (cola circular)
            senial = SenialCola(tamanio)

        else:
            raise ValueError(
                f"Tipo de se√±al no soportado: '{tipo_senial}'. "
                f"Valores v√°lidos: 'lista', 'pila', 'cola'"
            )

        return senial

"""
Paquete procesamiento_senial - Aplicaci√≥n completa de OCP con Strategy Pattern

Este m√≥dulo demuestra la implementaci√≥n correcta del Open/Closed Principle
refactorizando desde violaci√≥n hacia extensibilidad sin modificaci√≥n.

üìö DOCUMENTACI√ìN T√âCNICA:
- OCP completo: docs/IMPLEMENTACION DE OCP CON ABSTRACCIONES.md
- Strategy + Factory Pattern: Abstracciones + polimorfismo + creaci√≥n extensible

üéØ EVOLUCI√ìN OCP DEMOSTRADA:
ANTES: Modificar clase existente para cada nuevo tipo (violaci√≥n OCP)
DESPU√âS: Solo agregar nueva clase que herede de BaseProcesador (cumple OCP)

üèóÔ∏è PATR√ìN STRATEGY IMPLEMENTADO:
- BaseProcesador: Abstracci√≥n que define contrato com√∫n
- ProcesadorAmplificador: Estrategia concreta para amplificaci√≥n
- ProcesadorConUmbral: Estrategia concreta para filtrado por umbral
- Futuras extensiones: FFT, Wavelets, Filtros digitales, etc.

Versi√≥n: 2.0.0 - OCP con Strategy Pattern completo
Autor: Victor Valotto
"""
from abc import ABCMeta, abstractmethod
from dominio_senial.senial import Senial


class BaseProcesador(metaclass=ABCMeta):
    """
    üèóÔ∏è ABSTRACCI√ìN BASE - Strategy Pattern para procesamiento extensible.

    üìö REFERENCIA OCP:
    docs/IMPLEMENTACION DE OCP CON ABSTRACCIONES.md - "Factory Pattern + Polimorfismo"
    Demuestra c√≥mo las abstracciones permiten extensibilidad infinita sin modificaci√≥n.

    üéØ CONTRATO COM√öN:
    Define la interfaz estable que TODAS las implementaciones deben cumplir,
    permitiendo intercambiabilidad polim√≥rfica total (LSP).

    ‚úÖ CUMPLE OCP PERFECTAMENTE:
    - Abierto para extensi√≥n: Infinitas implementaciones posibles
    - Cerrado para modificaci√≥n: Esta abstracci√≥n NUNCA cambia
    - Polimorfismo: Cliente usa BaseProcesador, ignora implementaciones espec√≠ficas

    üîÑ EXTENSIBILIDAD SIN L√çMITES:
    Agregar ProcesadorFFT, ProcesadorWavelet, ProcesadorFiltroDigital NO requiere:
    - Modificar esta clase abstracta
    - Modificar c√≥digo que usa BaseProcesador
    - Modificar Factory methods existentes
    - Modificar tests polim√≥rficos
    """
    def __init__(self):
        """
        Se inicializa con la senial que se va a procesar
        """
        self._senial_procesada = Senial()

    @abstractmethod
    def procesar(self, senial):
        """
        Metodo abstracto que se implementara para cada tipo de procesamiento
        """

    def obtener_senial_procesada(self):
        """
        Devuelve la se√±al procesada
        """
        return self._senial_procesada


class ProcesadorAmplificador(BaseProcesador):
    """
    üîä ESTRATEGIA CONCRETA - Amplificaci√≥n con factor configurable.

    üìö REFERENCIA OCP:
    docs/IMPLEMENTACION DE OCP CON ABSTRACCIONES.md - "Extensiones sin Modificaci√≥n"
    Primera implementaci√≥n que demuestra extensi√≥n del contrato base.

    üéØ RESPONSABILIDAD ESPEC√çFICA (SRP):
    Amplificar cada valor de la se√±al por un factor configurable,
    aplicando transformaci√≥n matem√°tica simple: valor_nuevo = valor_original * factor.

    ‚úÖ CUMPLE LSP:
    - Intercambiable con cualquier BaseProcesador
    - Respeta el contrato: procesar() llena self._senial_procesada
    - Comportamiento predecible: amplificaci√≥n determin√≠stica

    üîÑ EJEMPLO EXTENSI√ìN OCP:
    Esta clase se agreg√≥ SIN modificar BaseProcesador ni c√≥digo cliente.
    Futuras clases (ProcesadorConUmbral, etc.) siguen el mismo patr√≥n.
    """
    def __init__(self, amplificacion):
        """
        Sobreescribe el constructor de la clase abstracta para inicializar el valor de amplificacion
        :param amplificacion: Factor de amplificaci√≥n a aplicar
        """
        super().__init__()
        self._amplificacion = amplificacion

    def procesar(self, senial):
        """
        Implementa el procesamiento de amplificar cada valor de senial
        :param senial: Se√±al a procesar
        """
        print(f"Procesando amplificaci√≥n (factor {self._amplificacion}x)...")
        self._senial_procesada._valores = list(map(self._amplificar, senial._valores))

    def _amplificar(self, valor):
        """
        Funci√≥n que amplifica un valor por el factor establecido
        :param valor: Valor a amplificar
        :return: Valor amplificado
        """
        return valor * self._amplificacion

class ProcesadorConUmbral(BaseProcesador):
    """
    üöß ESTRATEGIA CONCRETA - Filtrado por umbral configurable.

    üìö REFERENCIA OCP:
    docs/IMPLEMENTACION DE OCP CON ABSTRACCIONES.md - "Nuevos Tipos sin Modificaci√≥n"
    Segunda implementaci√≥n que demuestra OCP: extensi√≥n sin tocar c√≥digo existente.

    üéØ RESPONSABILIDAD ESPEC√çFICA (SRP):
    Filtrar valores de la se√±al por umbral configurable:
    - Valores < umbral: se mantienen
    - Valores >= umbral: se ponen en 0

    ‚úÖ CUMPLE LSP:
    - Intercambiable con ProcesadorAmplificador y cualquier BaseProcesador
    - Respeta el contrato abstracto completamente
    - Comportamiento consistente: filtrado determin√≠stico

    üîÑ BENEFICIO OCP DEMOSTRADO:
    Esta clase se agreg√≥ DESPU√âS de ProcesadorAmplificador sin:
    - Modificar BaseProcesador
    - Modificar ProcesadorAmplificador
    - Modificar c√≥digo que usa procesadores (Lanzador, Configurador)
    - Romper tests existentes
    """
    def __init__(self, umbral):
        """
        Sobreescribe el constructor de la clase abstracta para inicializar el umbral
        :param umbral: Valor del umbral para filtrado
        """
        super().__init__()
        self._umbral = umbral

    def procesar(self, senial):
        """
        Implementa el procesamiento de la se√±al con filtrado por umbral
        :param senial: Se√±al a procesar
        """
        print(f"Procesando filtro por umbral ({self._umbral})...")
        self._senial_procesada._valores = list(map(self._funcion_umbral, senial._valores))

    def _funcion_umbral(self, valor):
        """
        Funci√≥n que filtra valores seg√∫n el umbral establecido
        :param valor: Valor a evaluar
        :return: Valor original si es menor al umbral, 0 en caso contrario
        """
        return valor if valor < self._umbral else 0

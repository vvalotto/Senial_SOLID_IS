"""
Factory de Procesadores - Patr√≥n Factory + Dependency Injection

Este m√≥dulo implementa el Factory Pattern especializado para la creaci√≥n
de procesadores con inyecci√≥n de dependencias.

üéØ PRINCIPIOS SOLID APLICADOS:
- SRP: Responsabilidad √∫nica - crear procesadores configurados
- OCP: Extensible para nuevos tipos sin modificar clientes
- DIP: Recibe dependencias (se√±al) como par√°metros - inversi√≥n de control

üèóÔ∏è PATR√ìN IMPLEMENTADO:
Factory especializado que conoce solo el dominio de procesamiento,
delegando la decisi√≥n de QU√â se√±al usar al Configurador (nivel superior).

Versi√≥n: 1.0.0 - Factory Local con DIP
Autor: Victor Valotto
"""
from typing import Dict, Any

from procesamiento_senial.procesador import (
    BaseProcesador,
    ProcesadorAmplificador,
    ProcesadorConUmbral
)
from dominio_senial.senial import SenialBase


class FactoryProcesador:
    """
    ‚úÖ Factory especializado para procesadores.

    üìñ RESPONSABILIDAD √öNICA:
    Crear instancias de procesadores con configuraci√≥n espec√≠fica,
    inyectando las dependencias que vienen del Configurador.

    ‚úÖ DIP APLICADO:
    - Recibe se√±al como par√°metro (abstracci√≥n SenialBase)
    - No decide QU√â tipo de se√±al usar (responsabilidad del Configurador)
    - Solo ensambla el procesador con sus dependencias

    üîÑ EXTENSIBILIDAD:
    Agregar nuevos tipos de procesador solo requiere modificar este factory,
    sin afectar al Configurador ni a otros componentes.
    """

    @staticmethod
    def crear(tipo_procesador: str, config: Dict[str, Any], senial: SenialBase) -> BaseProcesador:
        """
        üè≠ FACTORY METHOD - Crea procesador con dependencias inyectadas.

        üìñ DIP EXPL√çCITO:
        La se√±al es INYECTADA desde el exterior (Configurador), no creada aqu√≠.
        El factory solo ensambla el procesador con sus dependencias.

        üéØ PAR√ÅMETROS:
        :param tipo_procesador: Tipo de procesador a crear
            - 'amplificador': Amplificaci√≥n por factor configurable
            - 'umbral': Filtrado por umbral configurable
        :param config: Diccionario con configuraci√≥n espec√≠fica del tipo
            - Para 'amplificador': {'factor': float}
            - Para 'umbral': {'umbral': float}
        :param senial: Instancia de se√±al INYECTADA (SenialBase)

        :return: Procesador configurado con dependencias inyectadas
        :rtype: BaseProcesador
        :raises ValueError: Si el tipo no est√° soportado

        üß™ EJEMPLO DE USO:
        ```python
        # Configurador decide la se√±al (DIP)
        senial = SenialCola()

        # Factory ensambla con la se√±al inyectada
        procesador = FactoryProcesador.crear(
            tipo_procesador='amplificador',
            config={'factor': 4.0},
            senial=senial  # ‚Üê Inyecci√≥n de dependencia
        )
        ```
        """
        procesador = None

        if tipo_procesador == 'amplificador':
            # Crear procesador amplificador
            factor = config.get('factor', 2.0)
            procesador = ProcesadorAmplificador(factor)
            # ‚úÖ Inyecci√≥n de dependencia expl√≠cita
            procesador._senial = senial

        elif tipo_procesador == 'umbral':
            # Crear procesador con umbral
            umbral = config.get('umbral', 5.0)
            procesador = ProcesadorConUmbral(umbral)
            # ‚úÖ Inyecci√≥n de dependencia expl√≠cita
            procesador._senial = senial

        else:
            raise ValueError(
                f"Tipo de procesador no soportado: '{tipo_procesador}'. "
                f"Valores v√°lidos: 'amplificador', 'umbral'"
            )

        return procesador

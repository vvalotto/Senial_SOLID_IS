"""
Factory de Contextos - Patr√≥n Factory + Strategy Pattern

Este m√≥dulo implementa el Factory Pattern especializado para la creaci√≥n
de contextos de persistencia con diferentes estrategias de almacenamiento.

üéØ PRINCIPIOS SOLID APLICADOS:
- SRP: Responsabilidad √∫nica - crear contextos de persistencia
- OCP: Extensible para nuevos tipos sin modificar clientes
- LSP: Todos los contextos son intercambiables (BaseContexto)
- DIP: Configuraci√≥n externa determina el tipo

üèóÔ∏è PATR√ìN IMPLEMENTADO:
Factory especializado que crea instancias de contextos seg√∫n configuraci√≥n externa,
permitiendo que el Configurador/Repositorio decida la estrategia de persistencia.

Versi√≥n: 1.0.0 - Factory de Infraestructura
Autor: Victor Valotto
"""
from typing import Dict, Any

from persistidor_senial.contexto import (
    BaseContexto,
    ContextoPickle,
    ContextoArchivo
)


class FactoryContexto:
    """
    ‚úÖ Factory especializado para contextos de persistencia.

    üìñ RESPONSABILIDAD √öNICA:
    Crear instancias de contextos con estrategia de almacenamiento espec√≠fica,
    seg√∫n la configuraci√≥n externa (JSON).

    ‚úÖ STRATEGY PATTERN:
    Cada contexto implementa una estrategia diferente de persistencia:
    - ContextoPickle: Serializaci√≥n binaria (r√°pida, eficiente)
    - ContextoArchivo: Texto plano (human-readable, debuggeable)

    üîÑ EXTENSIBILIDAD:
    Agregar nuevos tipos de contexto (BD, Cloud, etc.) solo requiere
    modificar este factory, sin afectar al Configurador ni Repositorios.
    """

    @staticmethod
    def crear(tipo_contexto: str, config: Dict[str, Any]) -> BaseContexto:
        """
        üè≠ FACTORY METHOD - Crea contexto con estrategia espec√≠fica.

        üìñ CONFIGURACI√ìN EXTERNA:
        El tipo y par√°metros vienen de configuraci√≥n externa (JSON),
        permitiendo cambiar la estrategia de persistencia sin modificar c√≥digo.

        üéØ PAR√ÅMETROS:
        :param tipo_contexto: Tipo de contexto a crear
            - 'pickle': Serializaci√≥n binaria con pickle
            - 'archivo': Archivos de texto plano con mapeador
        :param config: Diccionario con configuraci√≥n espec√≠fica del tipo
            - Para todos: {'recurso': str}  (path del directorio)

        :return: Contexto configurado (BaseContexto)
        :rtype: BaseContexto
        :raises ValueError: Si el tipo no est√° soportado
        :raises ValueError: Si falta el par√°metro 'recurso'

        üß™ EJEMPLO DE USO:
        ```python
        # Configuraci√≥n desde JSON
        config = {'recurso': './datos_persistidos/adquisicion'}

        # Factory crea contexto seg√∫n tipo
        contexto = FactoryContexto.crear('pickle', config)
        # ‚úÖ Retorna ContextoPickle('./datos_persistidos/adquisicion')
        ```

        üìã CONFIGURACI√ìN JSON EJEMPLO:
        ```json
        {
          "contexto_adquisicion": {
            "tipo": "archivo",
            "recurso": "./datos_persistidos/adquisicion"
          },
          "contexto_procesamiento": {
            "tipo": "pickle",
            "recurso": "./datos_persistidos/procesamiento"
          }
        }
        ```

        üîÑ ESTRATEGIAS DE PERSISTENCIA:

        **ContextoPickle** (tipo='pickle'):
        - ‚úÖ Serializaci√≥n binaria r√°pida
        - ‚úÖ Preserva estructura completa del objeto
        - ‚úÖ Reconstrucci√≥n autom√°tica
        - ‚ùå No human-readable
        - üìÅ Extensi√≥n: .pickle

        **ContextoArchivo** (tipo='archivo'):
        - ‚úÖ Formato de texto plano
        - ‚úÖ Human-readable para debugging
        - ‚úÖ Soporta listas y colecciones
        - ‚ùå M√°s lento que pickle
        - üìÅ Extensi√≥n: .dat
        """
        contexto = None

        # Extraer recurso (obligatorio)
        recurso = config.get('recurso')
        if not recurso:
            raise ValueError(
                "Falta par√°metro obligatorio 'recurso' en la configuraci√≥n del contexto"
            )

        if tipo_contexto == 'pickle':
            # Crear contexto con serializaci√≥n binaria
            contexto = ContextoPickle(recurso)

        elif tipo_contexto == 'archivo':
            # Crear contexto con archivos de texto plano
            contexto = ContextoArchivo(recurso)

        else:
            raise ValueError(
                f"Tipo de contexto no soportado: '{tipo_contexto}'. "
                f"Valores v√°lidos: 'pickle', 'archivo'"
            )

        return contexto

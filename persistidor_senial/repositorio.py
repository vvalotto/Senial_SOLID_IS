"""
Patr√≥n repositorio: responsable de manejar de manera abstracta la persitencia
de las entidades

‚ö†Ô∏è VIOLACI√ìN ISP INTENCIONAL - PROP√ìSITO DID√ÅCTICO ‚ö†Ô∏è

Este m√≥dulo contiene una violaci√≥n deliberada del Interface Segregation Principle
para demostrar las consecuencias de interfaces "gordas" que obligan a los clientes
a implementar m√©todos innecesarios.

üìö VIOLACI√ìN DEMOSTRADA:
BaseRepositorio define 4 m√©todos abstractos obligatorios:
- guardar() ‚úÖ Todos los repositorios lo necesitan
- obtener() ‚úÖ Todos los repositorios lo necesitan
- auditar() ‚ö†Ô∏è Solo RepositorioSenial lo necesita
- trazar() ‚ö†Ô∏è Solo RepositorioSenial lo necesita

‚ùå CONSECUENCIAS:
RepositorioUsuario est√° FORZADO a implementar auditar() y trazar()
aunque NO los necesita, resultando en implementaciones stub que lanzan excepciones.

üéØ LECCI√ìN: Segregar interfaces seg√∫n necesidades reales de los clientes.
"""
from abc import ABC, abstractmethod
from typing import Any
import datetime


class BaseRepositorio(ABC):
    """
    ‚ö†Ô∏è INTERFAZ "GORDA" - Violaci√≥n ISP Intencional

    Define la interfaz para el acceso a la persistencia de datos
    CON M√âTODOS QUE NO TODOS LOS CLIENTES NECESITAN.

    Problema: Obliga a TODAS las implementaciones a definir:
    - Persistencia (guardar/obtener) ‚úÖ Necesario para todos
    - Auditor√≠a (auditar/trazar) ‚ùå Solo necesario para algunos

    Soluci√≥n ISP: Segregar en IRepositorioBasico + IRepositorioAuditable
    """
    def __init__(self, contexto: Any):
        """
        Inicializa el repositorio con un contexto de persistencia
        :param contexto: Contexto de persistencia
        """
        self._contexto = contexto

    @abstractmethod
    def guardar(self, entidad: Any) -> None:
        """
        Persiste la entidad
        :param entidad: Entidad a persistir
        """
        pass

    @abstractmethod
    def obtener(self, id_entidad: str, entidad: Any = None) -> Any:
        """
        Obtiene una entidad por su identificador
        :param id_entidad: Identificador de la entidad
        :param entidad: Instancia template para deserializaci√≥n (opcional)
        :return: Entidad recuperada
        """
        pass

    @abstractmethod
    def auditar(self, entidad, auditoria):
        """
        ‚ö†Ô∏è M√âTODO PROBLEM√ÅTICO - No todos los repositorios necesitan auditor√≠a

        Realiza el registro de auditor√≠a sobre la entidad indicada
        :param entidad: Entidad a auditar
        :param auditoria: Informaci√≥n de auditor√≠a
        """
        pass

    @abstractmethod
    def trazar(self, entidad, accion, mensaje):
        """
        ‚ö†Ô∏è M√âTODO PROBLEM√ÅTICO - No todos los repositorios necesitan trazabilidad

        Realiza la traza del evento ocurrido sobre la entidad y con el mensaje de
        traza correspondiente
        :param entidad: Entidad a trazar
        :param accion: Acci√≥n realizada
        :param mensaje: Mensaje de traza
        """
        pass


class RepositorioSenial(BaseRepositorio):
    """
    ‚úÖ Repositorio que S√ç NECESITA todos los m√©todos de BaseRepositorio

    Las se√±ales son datos cr√≠ticos que requieren:
    - Persistencia (guardar/obtener)
    - Auditor√≠a completa (auditar/trazar)

    Este repositorio NO sufre la violaci√≥n ISP porque USA todos los m√©todos.
    """
    def __init__(self, contexto: Any):
        """
        Inicializa el repositorio con un contexto de persistencia
        :param contexto: Contexto de persistencia
        """
        super().__init__(contexto)

    def guardar(self, senial: Any) -> None:
        """
        Persiste la se√±al
        :param senial: Se√±al a persistir
        """
        try:
            # Convertir ID a string para compatibilidad
            self._contexto.persistir(senial, str(senial.id))
        except Exception as e:
            print(f"Error al guardar la se√±al: {e}")
            raise

    def obtener(self, id_senial: str, entidad: Any = None) -> Any:
        """
        Obtiene una se√±al por su identificador

        RECONSTRUCCI√ìN AUTOM√ÅTICA: Si el contexto es ContextoArchivo con metadatos,
        no requiere 'entidad'. Si es necesario, se puede proporcionar.

        :param id_senial: Identificador de la se√±al
        :param entidad: Instancia template para deserializaci√≥n (opcional)
        :return: Se√±al recuperada
        """
        try:
            return self._contexto.recuperar(id_senial, entidad)
        except Exception as e:
            print(f"Error al obtener la se√±al: {e}")
            raise

    def auditar(self, senial, auditoria):
        """
        ‚úÖ IMPLEMENTACI√ìN REAL - Este m√©todo S√ç se usa

        Realiza el registro de auditor√≠a sobre la se√±al indicada
        :param senial: Se√±al a auditar
        :param auditoria: Informaci√≥n de auditor√≠a
        """
        nombre = 'auditor.log'
        try:
            with open(nombre, 'a') as auditor:
                auditor.write('------->\n')
                auditor.write(f'Se√±al ID: {senial.id}\n')
                auditor.write(f'Fecha: {datetime.datetime.now()}\n')
                auditor.write(f'Auditor√≠a: {auditoria}\n')
                auditor.write('\n')
        except IOError as eIO:
            print(f"Error al auditar la se√±al: {eIO}")
            raise

    def trazar(self, senial, accion, mensaje):
        """
        ‚úÖ IMPLEMENTACI√ìN REAL - Este m√©todo S√ç se usa

        Realiza la traza del evento ocurrido sobre la se√±al y con el mensaje de
        traza correspondiente
        :param senial: Se√±al a trazar
        :param accion: Acci√≥n realizada
        :param mensaje: Mensaje de traza
        """
        nombre = 'logger.log'
        try:
            with open(nombre, 'a') as logger:
                logger.write('------->\n')
                logger.write(f'Acci√≥n: {accion}\n')
                logger.write(f'Se√±al ID: {senial.id}\n')
                logger.write(f'Fecha: {datetime.datetime.now()}\n')
                logger.write(f'Mensaje: {mensaje}\n')
                logger.write('\n')
        except IOError as eIO:
            print(f"Error al trazar la se√±al: {eIO}")
            raise


class RepositorioUsuario(BaseRepositorio):
    """
    ‚ùå Repositorio que SUFRE la violaci√≥n ISP

    Los usuarios solo necesitan:
    - Persistencia (guardar/obtener) ‚úÖ Se usan
    - Auditor√≠a (auditar/trazar) ‚ùå NO se necesitan

    Problema: BaseRepositorio OBLIGA a implementar auditar() y trazar()
    aunque este repositorio NO los necesita.

    Consecuencia: Implementaciones falsas (stub) que lanzan excepciones.
    """
    def __init__(self, contexto: Any):
        """
        Inicializa el repositorio con un contexto de persistencia
        :param contexto: Contexto de persistencia
        """
        super().__init__(contexto)

    def guardar(self, usuario: Any) -> None:
        """
        ‚úÖ IMPLEMENTACI√ìN REAL - Este m√©todo S√ç se usa

        Persiste el usuario
        :param usuario: Usuario a persistir
        """
        try:
            self._contexto.persistir(usuario, str(usuario.id))
        except Exception as e:
            print(f"Error al guardar el usuario: {e}")
            raise

    def obtener(self, id_usuario: str, entidad: Any = None) -> Any:
        """
        ‚úÖ IMPLEMENTACI√ìN REAL - Este m√©todo S√ç se usa

        Obtiene un usuario por su identificador

        RECONSTRUCCI√ìN AUTOM√ÅTICA: Si el contexto es ContextoArchivo con metadatos,
        no requiere 'entidad'. Si es necesario, se puede proporcionar.

        :param id_usuario: Identificador del usuario
        :param entidad: Instancia template para deserializaci√≥n (opcional)
        :return: Usuario recuperado
        """
        try:
            return self._contexto.recuperar(id_usuario, entidad)
        except Exception as e:
            print(f"Error al obtener el usuario: {e}")
            raise

    def auditar(self, entidad, auditoria):
        """
        ‚ùå IMPLEMENTACI√ìN STUB - Violaci√≥n ISP

        FORZADO a implementar por BaseRepositorio pero NO se necesita.

        Este m√©todo existe SOLO porque la interfaz abstracta lo obliga.
        Si un cliente intenta usarlo, FALLA en runtime.

        üéØ LECCI√ìN ISP: "Los clientes no deber√≠an depender de interfaces que no usan"
        """
        raise NotImplementedError("RepositorioUsuario no soporta auditor√≠a - Violaci√≥n ISP")

    def trazar(self, entidad, accion, mensaje):
        """
        ‚ùå IMPLEMENTACI√ìN STUB - Violaci√≥n ISP

        FORZADO a implementar por BaseRepositorio pero NO se necesita.

        Este m√©todo existe SOLO porque la interfaz abstracta lo obliga.
        Si un cliente intenta usarlo, FALLA en runtime.

        üéØ LECCI√ìN ISP: "Los clientes no deber√≠an depender de interfaces que no usan"
        """
        raise NotImplementedError("RepositorioUsuario no soporta trazabilidad - Violaci√≥n ISP")
